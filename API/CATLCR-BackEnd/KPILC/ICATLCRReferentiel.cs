using CATLCR_BackEnd.Model;
using CATLCR_BackEnd.Models.Configuration;
using CATLCR_BackEnd.Models.KPILCModel;
using CATLCR_BackEnd.Referentiel;
using System;
using System.Collections.Generic;

namespace CATLCR_BackEnd.KPILC
{
    public interface ICATLCRReferentiel
    {
        bool UpdateUserParams(ReportUserParamsModel newList);
        CountryModel GetCountriesByUserId(Guid UserId);
        Guid GetServiceId(Guid? userID);
        Guid AddUser(WebUsersModel newUser);
        int UpdateUser(WebUsers newUser);
        WebUsers FindByAccesKey(string accesKey);
        List<RefPlateformes> GetAllPlateforme();
        //List<UserModel> GetAllUsers();
        List<UserModel> GetAllUsers(int type, string AccessKey);
        List<WebCountries> GetAllWebCountries();
        List<RefPlateformes> getAllPlatformesByListOfCountries(List<Country> _countries);
        List<WebCountries> GetAllWebCountries(string _name);
        WebPages GetDefaultPage(WebUsers user);
        List<Country> GetAllCountries(string _name, int indexStart, int number, Guid _userId, bool _useUser);
        bool UpdateProductUser(ReportUserProductsModel _newList);
        bool UpdateBrandsUser(BrandModel newList);
        VersionModel GetVersion();
        bool UpdateMrNumbersUser(ReportUserMrNumbersModel _newList);
        string DeleteUser(Guid UserId);

        List<Country> GetAllCountriesEx();
        List<WebReportRed> GetReportsByNorService(Guid ServiceId);
        string CreateProfile(ProfileModel model);
        List<WebProfile> GetAllProfile(string keyWord);
        List<ReportKeyValue> GetReport_2_DailyPerfDelayEx(string _country, DateTime _start, DateTime _end, Guid _IdReport);
        List<PF_Country_User> GetPlateformesByUserCategoryReport(Guid _categoryID, string _country, Guid _userId);
        List<KeyValueDDL> GetAllProductDelayReportByCountry(string _country, Guid _categoryID);
        List<KeyValueDDL> GetAllBrandsByCountryEx(string _country, string _name, int indexStart, int number, out int _resultCount);
        CountryModel UpdateCountriesByUser(List<string> _listToDelete, List<string> _listToAdd, Guid _userId);
        PlatformModel UpdatePlateformesByUser(List<string> listToDelete, List<string> listToAdd, Guid userId);
        PlatformModel GetPlatformsByUserId(Guid UserId);
        CO2KPICLModel GetCo2KPILCUsers(string AccessKey);
        List<ReportModel> GetprofileReport (Guid profileId);

        List<ReportModel> GetprofileNorReport(Guid profileId);
        bool AddReportParams(WebReportsParamsModel model);
        Guid GetReportByKey(string _key);
        List<WebReportsParamsModel> GetAllReportParamsByReport(Guid _CategoryID);
        List<ReportModel> GetUserReportsByProfile(Guid UserId);
        List<ProductKpiModel> GetAllProductWithKpi();
        bool DeleteProductRegime(Guid Id);
        List<KeyValueDDL> GetPendingProductsToParams();
        List<ProductRegimeModel> GetRegimes();
        bool InsertProductWithKpi(ProductKpiModel newProductKpi);
        List<RefTranscoFpWex> GetAllUpletByCountry(string _country, Guid _categoryId, bool? ArrCountry);
        bool InsertPRoductRegime(ProductRegimeModel productRegime);
        bool UpdateProductRegime(ProductRegimeModel productRegime);
        List<KpiSettingModel> GetAllKpiSetting();
        bool UpdateKpiSetting(KpiSettingModel kpiSetting);
        bool DeleteReportParams(Guid _paramId);
        List<RefTranscoFpWex> GetAllUpletByCountryForBrands(string country, Guid categoryId);
        List<WebReportDealerShipmentsParams> GetAllDealerShipmentCodes();
        List<KeyValueDDL> GetRefSupplierForDelayReports(string country);
        List<KeyValueDDL> GetRefDealerCodes(string country, string brand);
        bool InsertDealerShipmentParam(WebReportDealerShipmentsParams newItem);
        bool DeleteDealerShipmentParam(Guid itemId);
        List<ViaCustomerModel> GetAllViaCustomers();
        bool UpdateUserParamCountries(UserCountriesModel model);
        bool UpdateUserRegimes(UserRegimesModel _newList);
        bool UpdateUserMarques(UserMarquesModel model);
        List<RefTranscoFpWex> GetAllUplet();
        bool UpdateREF_TRANSCO_FP_WEX(RefTranscoFpWex _item);
        List<RefRegimes> getAllRegimes();
        bool Log(WebReportsModel report);
        List<CustomerCountries> GetMajorCustomerCountries();
        bool UpdateMajorCustomerCountry(CustomerCountries countryModel);
        List<WebYears> GetAllYears();
        List<WebOpenDaysDet> GetOpenDaysDetByCountryAndYear(string _CodeCountry, int _Year);
        bool InsertOpenDaysDet(WebOpenDaysDet _new);
        bool DeleteFromWeb_OpenDaysDet(Guid _Id);
        List<ReportWebCategoriesPfs> GetAllCategoriesPFByCategory(Guid _categoryId);
        bool DeleteReportWeb_CategoryPF(ReportWebCategoriesPfs _oldItem);
        bool AddReportWeb_CategoryPF(ReportWebCategoriesPfs _newitem);
        List<RefPlateformes> GetAllPlateformesWithoutName(Guid _categoryId, string _country);
        List<ReportParamExModel> GetAllReportParamsByCountryReport(string _country, Guid _CategoryID);
        List<ProductRegimeModel> GetAllProductRegimes();
        List<EmailReport_EmailEx> GetAllEmailtemForListing();
        List<WebReports> getAllReportForEmails();
        List<Country> GetAllCountriesRes();
        List<EmailWeb_EmailFrequencyEx> GetAllWebFrequencies();
        bool InsertEmailItem(EmailReport_EmailEx _newItem);
        bool UpdateEmailItem(EmailReport_EmailEx _newItem);
        List<Product_Brand_User> GetUserProductsByCountryForInserting(string country);
        List<Marque_Country_User> GetUserMarqueByCountryForInserting(string _country);
        List<Product_Brand_User> GetUserProductsByCountryBrandForInserting(string _country, string _marque);
        EmailReport_EmailEx GetAllEmailsReportsItemByIDForEditing(Guid _itmID);
        bool DeleteEmailById(Guid _Id);
        List<ReportMajorCustomerForVolume> GetMajorCustomers();
        bool DeleteMajorCustomer(string customer);
        bool AddMajorCustomer(ReportMajorCustomerForVolume _customer);
        List<RefMarques> getAllMajorMarqueByCountryOutOfTable(string Country);
        List<ReportOpenDays> GetOpenDaysByCountryAndYear(string _CodeCountry, int _Year);
        bool UpdateOpenDaysById(ReportOpenDays _oldOpenDay);
        ReportOpenDays GetOpenDayById(Guid Id);
        bool UpdatePlateForme(RefPlateformes _newPLF);
        List<RefPlateformes> GetPlateformesUCountry(string _country);
    }
}
